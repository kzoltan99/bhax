<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Encoding</title>
        <para>
		Fordítsuk le és futtassuk a Javat tanítok könyv MandelbrotHalmazNagyító.java forrását úgy, hogy a
fájl nevekben és a forrásokban is meghagyjuk az ékezetes betűket!
https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/adatok.html

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/kzoltan99/mandel.java/blob/master/MandelbrotHalmazNagy%C3%ADt%C3%B3.java">https://github.com/kzoltan99/mandel.java/blob/master/MandelbrotHalmazNagy%C3%ADt%C3%B3.java</link>             
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
	    <para>
		    Ebben a feladatban az encoding kapcsolót kell használatba vennünk annak érdekében, hogy a magyar ábécében szereplő
		    ékezetes betűket is használhassuk a kódban illetve annak nevében. Mivel alapjáraton a fordítónk UTF-8-as karakterkódolást
		    használ és ezt kell egy számunkra megfelelőre átállítani. Erre szerintem megfelelő lenne a Latin-2-es kódolás (kódja: iso-8859-2)
		    Így már fordul a program gond nélkül.  
    </para>
	    <figure>
	<title>1.</title>
	<mediaobject>
		<imageobject>
		<imagedata fileref="./img/9.png" scale = "60"/>
		</imageobject>
	</mediaobject>
	</figure>
	    
    </section>        

     <section>
        <title>OOCWC lexer</title>
        <para>
		Izzítsuk be az OOCWC-t és vázoljuk a https://github.com/nbatfai/robocaremulator/blob/master/justine/rcemu/src/carlexer.ll lexert és kapcsolását a programunk OO
struktúrájába!

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section> 
    <section>
        <title>l334d1c45</title>
        <para>
		Írj olyan OO Java vagy C++ osztályt, amely leet cipherként működik, azaz megvalósítja ezt a betű
helyettesítést: https://simple.wikipedia.org/wiki/Leet (Ha ez első részben nem tetted meg, akkor írasd
ki és magyarázd meg a használt struktúratömb memóriafoglalását!)
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section> 
    <section>
        <title>Full screen</title>
        <para>
		Készítsünk egy teljes képernyős Java programot!
Tipp: https://www.tankonyvtar.hu/en/tartalom/tkt/javat-tanitok-javat/ch03.html#labirintus_jatek
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>     
	<section>
        <title>Paszigráfia Rapszódia OpenGL full screen vizualizáció</title>
        <para>
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section> 	
	<section>
        <title>Paszigráfia Rapszódia OpenGL full screen vizualizáció</title>
        <para>
		Lásd vis_prel_para.pdf! Apró módosításokat eszközölj benne, pl. színvilág, textúrázás, a szintek jobb
elkülönítése, kézreállóbb irányítás.
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section> 
	<section>
        <title>Paszigráfia Rapszódia LuaLaTeX vizualizáció</title>
        <para>
Lásd vis_prel_para.pdf! Apró módosításokat eszközölj benne, pl. színvilág, még erősebb 3D-s hatás.
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section> 
	<section>
        <title>Perceptron osztály</title>
	<para>
Dolgozzuk be egy külön projektbe a projekt Perceptron osztályát!
Lásd <link xlink:href="https://youtu.be/XpBnR31BRJY">https://youtu.be/XpBnR31BRJY</link>
	</para>
	<para>
           A gépi tanulásban nagyon fontos algoritmus a perceptron. Léteznek úgynevezett bináris osztályzók is melyeknek feladata az, hogy eldöntsék, hogy a bemenet egy különleges(specifikus) osztály része-e.
		   Magát a perceptront sokkal jobban nem ecsetelném mivel nagyon összetett dolog és szinte minden információ megtalálható róla pl a Wikipédián is.
		  </para>
	<para>
	Három részből áll a perceptron: van egy oylan rész melyet "retinának" nevezünk, ez az első elem, feladata azon cellák tárolása melyek fogadják az inputot.
	Aztán maguk a cellák. ezek összegzik a jeleket amik beérkeznek.
	Végül pedig vannak olyan cellák melyek már a perceptron kimeneti részében vannak, ezek a döntési cellák. A működésük módja hasonló a többi cellához.
	</para>
	                       
		<para>
	Ez a feladat egy az előző félévi perceptronos feladat egyik iterációja. Most ugye azt is meg kell oldani, hogy bemenetként vegyünk egy képet és az lesz a többrétegű perceptron bemenete.
	</para>
	<para>
	Mivel többrétegű perceptront fogunk alkalmazni ezért meg kell tennünk a megfelelő include-okat. Ezek névszerint az mlp és a png kép használata végett a png könyvtárak.
	<programlisting><![CDATA[
#include <iostream>
#include "mlp.hpp"
#include <png++/png.hpp>]]></programlisting>
	<para>
	Maga a forrás nem túl hosszú. Először is beolvassuk a képet (get_width, get_height) és a new operátorral létrehozzuk a perceptront.
	</para>
<programlisting language><![CDATA[
int main(int argc, char ++argv){
png::image <png::rgb_pixel> png_image(argv[1]);
int size = png_image.get_width()*png_image.get_height();
Perceptron *p = new Perceptron(3, size, 256, 1);]]></programlisting>
	<para>
	Aztán létre kell hoznunk egy double változót. Utána szépen végigmegyünk a kép magasság/szélesség pontjain for ciklusokkal. Az image fogja tárolni azt a színkomponenst amit a kódban megadtunk. A value pedig majd azt a double-t fogja tárolni amit a végén kiíratunk.
	</para>
<programlisting language=><![CDATA[double* image = new double[size];
for(int i = 0; i<png_image.get_width(); ++i)
	for(int j = 0; i<png_image.get_height(); ++j)
	image[i*png_image.get_width()+j] = png_image[i][j].red;
double value = (*p) (image);
cout << value << endl;]]></programlisting>
	<para>
	A végén pedig a delete-el felszabadítjuk a számunkra szükséges helyet a memóriában.
	</para>
<programlisting language=><![CDATA[
delete p;
delete [] image;]]></programlisting>
    </section>
        

</chapter>                
